from telegram.ext import Application, MessageHandler, filters, ConversationHandler, \
    CommandHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import json
import random


async def solving_puzzles(update, context):
    cnt = context.user_data['cnt']
    chat_id = update.effective_message.chat_id
    if cnt > 20:
        await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–æ'
                                        ' —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è!',
                                        reply_markup=ReplyKeyboardRemove())
        return 0
    if cnt % 2 == 1:
        await context.bot.sendPhoto(chat_id, photo=f'static/img/puzzles/puzzle_{cnt}.png',
                                    caption='–ù–∞–π–¥–∏ –ª—É—á—à–∏–π —Ö–æ–¥ –∑–∞ –±–µ–ª—ã—Ö')
    else:
        await context.bot.sendPhoto(chat_id, photo=f'static/img/puzzles/puzzle_{cnt}.png',
                                    caption='–ù–∞–π–¥–∏ –ª—É—á—à–∏–π —Ö–æ–¥ –∑–∞ —á—ë—Ä–Ω—ã—Ö')
    reply_keyboard = [['–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞'], ['–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text('–í–≤–µ–¥–∏ —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–∫–ª–µ—Ç–∫–∞-–∫–ª–µ—Ç–∫–∞>', reply_markup=markup)
    return 7


async def puzzles(update, context):
    cnt = context.user_data['cnt']
    answer = context.user_data['solving_puzzles'][str(cnt)][0]
    req = update.message.text.strip().lower()
    chat_id = update.effective_message.chat_id
    if req == '—Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞':
        context.user_data['cnt'] += 1
        cnt = context.user_data['cnt']
        if context.user_data['cnt'] > 20:
            await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–æ'
                                            ' —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è!',
                                            reply_markup=ReplyKeyboardRemove())
            return 0
        if cnt % 2 == 1:
            await context.bot.sendPhoto(chat_id, photo=f'static/img/puzzles/puzzle_{cnt}.png',
                                        caption='–ù–∞–π–¥–∏ –ª—É—á—à–∏–π —Ö–æ–¥ –∑–∞ –±–µ–ª—ã—Ö')
        else:
            await context.bot.sendPhoto(chat_id, photo=f'static/img/puzzles/puzzle_{cnt}.png',
                                        caption='–ù–∞–π–¥–∏ –ª—É—á—à–∏–π —Ö–æ–¥ –∑–∞ —á—ë—Ä–Ω—ã—Ö')
    elif req == '–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç':
        await update.message.reply_text(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}.'
                                        f' {context.user_data["solving_puzzles"][str(cnt)][1]}')
    else:
        if len(req.split('-')) != 2:
            await update.message.reply_text(f'–í–≤–µ–¥–∏ —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–∫–ª–µ—Ç–∫–∞-–∫–ª–µ—Ç–∫–∞>')
        else:
            if req == answer:
                n = str(cnt)
                await update.message.reply_text(f'–î–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!'
                                                f' {context.user_data["solving_puzzles"][n][1]}')
            else:
                await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.')


async def get_help(update, context):
    await update.message.reply_text('–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ '
                                    '—Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–µ—à–µ–Ω–∏—è —à–∞—Ö–º–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á. –≠—Ç–æ '
                                    '–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∏–≥—Ä–µ. –í—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ —ç—Ç–æ —Å–∞–º–∏, –∫–æ–≥–¥–∞ '
                                    '–ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –ø–∞—Ä—Ç–∏–∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–µ—Å—Ç—è—â–∏–π —Ö–æ–¥, '
                                    '–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ–±–µ–¥–µ. –ê —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã –º–æ–∂–µ—Ç–µ'
                                    ' –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é.')


async def empty_function(update, context):
    await update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é...')


async def chess_players(update, context):
    await update.message.reply_text("–ü—Ä–æ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
                                    "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–∫–∏—Ö –ª—é–¥—è—Ö:\n"
                                    "\u2714 –ì–∞—Ä—Ä–∏ –ö–∞—Å–ø–∞—Ä–æ–≤\n"
                                    "\u2714 –ê–Ω–∞—Ç–æ–ª–∏–π –ö–∞—Ä–ø–æ–≤\n"
                                    "\u2714 –ú–∞–≥–Ω—É—Å –ö–∞—Ä–ª—Å–µ–Ω\n"
                                    "\u2714 –ë–æ–±–±–∏ –§–∏—à–µ—Ä\n"
                                    "\u2714 –≠–º–∞–Ω—É–∏–ª –õ–∞—Å–∫–µ—Ä\n"
                                    "\u2714 –ú–∏—Ö–∞–∏–ª –ë–æ—Ç–≤–∏–Ω–Ω–∏–∫\n"
                                    "\u2714 –í–µ—Ä–∞ –ú–µ–Ω—á–∏–∫\n"
                                    "\u2714 –ù–æ–Ω–∞ –ì–∞–ø—Ä–∏–Ω–¥–∞—à–≤–∏–ª–∏\n"
                                    "\u2714 –ï–ª–∏–∑–∞–≤–µ—Ç–∞ –ë—ã–∫–æ–≤–∞\n"
                                    "\u2714 –Æ–¥–∏—Ç –ü–æ–ª–≥–∞—Ä\n"
                                    "\u2757–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ –≤–≤–µ–¥–∏—Ç–µ"
                                    " —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ñ–∞–º–∏–ª–∏—é.", reply_markup=ReplyKeyboardRemove())
    return 1


async def information_about_chess_players(update, context):
    response = update.message.text.strip().lower()
    chess_player = context.user_data['chess_players'].get(response, None)
    if chess_player:
        await context.bot.send_photo(
            update.message.chat_id, chess_player['photo'])
        await update.message.reply_text(chess_player['biography'])
    else:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞"
                                        " –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")


async def training(update, context):
    if context.user_data.get('training level', -1) == -1:
        introduction = "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!\n"
        context.user_data['training level'] = 0
    elif context.user_data.get('training level', -1) == 0:
        introduction = "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞.\n"
    else:
        introduction = "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n" \
                       "–ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞, " \
                       "—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    introduction += "\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π " \
                    '—É—Ä–æ–≤–µ–Ω—å –Ω–∞–∂–∏–º–∞–π—Ç–µ "‚ñ∂ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å".'
    reply_keyboard = [['üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '‚ñ∂ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text(introduction, reply_markup=markup)
    return 2


async def chess_training(update, context):
    if update.message.text == '‚ñ∂ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        context.user_data['training level'] += 1
        if context.user_data['training level'] >= 14:
            await update.message.reply_text(context.user_data['chess_training'][
                                                str(14)],
                                            reply_markup=ReplyKeyboardRemove())
            return 0
        if type(context.user_data['chess_training'][
                    str(context.user_data['training level'])]['text']) == list:
            texts = context.user_data['chess_training'][str(context.user_data[
                                                                'training level'])]['text']
            photo = context.user_data['chess_training'][str(context.user_data[
                                                                'training level'])]['photo']
            for i in range(len(texts)):
                await context.bot.send_photo(
                    update.message.chat_id, photo[i], caption=texts[i])
        else:
            await update.message.reply_text(
                context.user_data['chess_training'][str(context.user_data['training level'])][
                    'text'])
            await context.bot.send_photo(
                update.message.chat_id,
                context.user_data['chess_training'][str(context.user_data['training level'])][
                    'photo'])
    elif update.message.text == 'üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        context.user_data['training level'] = 0
        await update.message.reply_text('–í—ã –æ–±–Ω—É–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å')
    else:
        await update.message.reply_text('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞.')


async def chess_dictionary(update, context):
    await update.message.reply_text('–í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å'
                                    ' —É–∑–Ω–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞.\n'
                                    '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤–∏–¥–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ <—Ç–µ—Ä–º–∏–Ω>?"\n'
                                    '–ò, –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –∑–∞–ø—Ä–æ—Å –Ω–∞–π–¥–µ—Ç—Å—è, –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.'
                                    '–ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                                    '–í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ, –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ'
                                    ' "–≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã"!', reply_markup=ReplyKeyboardRemove())
    return 3


async def search_terms(update, context):
    req = update.message.text.lower()
    if '—á—Ç–æ —Ç–∞–∫–æ–µ' in ' '.join(req.split()) and req[-1] == '?':
        terms = ' '.join(req.split()[2:])[:-1]
        definition = context.user_data['chess_dictionary'].get(terms, None)
        if definition:
            await update.message.reply_text(definition)
        else:
            await update.message.reply_text('–í —Å–ª–æ–≤–∞—Ä–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å...')
    elif '–≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã' == req:
        terms = '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: ' + '\n'
        terms += ', '.join(context.user_data['chess_dictionary'].keys()) + '.'
        await update.message.reply_text(terms)
    else:
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∏–¥!\n'
                                        '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤–∏–¥–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ <—Ç–µ—Ä–º–∏–Ω>?"')


async def start(update, context):
    with open('data/information.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
        players = data['chess_players']
        training = data['chess_training']
        dict = data['chess_dictionary']
        facts = data['interesting_facts']
        debuts = data['debuts']
        puzzles = data['solving_puzzles']
    context.user_data['chess_players'] = players
    context.user_data['chess_training'] = training
    context.user_data['chess_dictionary'] = dict
    context.user_data['interesting_facts'] = facts
    context.user_data['debuts'] = debuts
    context.user_data['solving_puzzles'] = puzzles
    context.user_data['cnt'] = 1
    await update.message.reply_text('–Ø –±–æ—Ç –°—Ç—Ä–∞—Ç–µ–≥. –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –º–Ω–æ–≥–æ–µ –æ —à–∞—Ö–º–∞—Ç–∞—Ö,'
                                    ' –∏–≥—Ä–æ–∫–∞—Ö, –Ω–∞—É—á–∏—Ç—å –≤–∞—Å –∏–≥—Ä–∞—Ç—å –∏'
                                    ' –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –Ω–∞–≤—ã–∫–∏ –≤ –∏–≥—Ä–µ! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã'
                                    ' –≤ –º–µ–Ω—é!', reply_markup=ReplyKeyboardRemove())
    return 0


async def interesting_facts(update, context):
    reply_keyboard = [['\u265f\ufe0f —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    if __name__ == '__main__':
        await update.message.reply_text("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ —à–∞—Ö–º–∞—Ç–∞—Ö"
                                        " - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=markup)
    return 5


async def random_fact(update, context):
    if update.message.text == '\u265f\ufe0f —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç':
        if len(context.user_data['interesting_facts']) == 0:
            await update.message.reply_text('–ù–∞ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. '
                                            '–ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!', reply_markup=ReplyKeyboardRemove())
            return 0
        fact = random.choice(context.user_data['interesting_facts'])
        index = context.user_data['interesting_facts'].index(fact)
        context.user_data['interesting_facts'].pop(index)
        if type(fact) == str:
            await update.message.reply_text(fact)
        else:
            await context.bot.send_photo(update.message.chat_id, fact[1], caption=fact[0])
    else:
        await update.message.reply_text('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞.')


async def chess_debuts(update, context):
    reply_keyboard = [['–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã', '–ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã'], ['–ó–∞–∫—Ä—ã—Ç—ã–µ –∏ –ø–æ–ª—É–∑–∞–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã',
                                                                   '–®–∞—Ö–º–∞—Ç–Ω—ã–µ –≥–∞–º–±–∏—Ç—ã']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text("–î–µ–±—é—Ç ‚Äì —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π"
                                    " –ø–∞—Ä—Ç–∏–∏, –≤–æ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ"
                                    " –∑–∞—Ä–∞–Ω–µ–µ —Ö–æ–¥—ã. –£—Å–ø–µ—à–Ω—ã–π –¥–µ–±—é—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –ø–æ–ª—É—á–∏—Ç—å"
                                    " –ø–µ—Ä–µ–≤–µ—Å —Å –ø–µ—Ä–≤—ã—Ö —Ö–æ–¥–æ–≤.\n"
                                    "–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã ‚Äì –±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞, —Ü–µ–ª—ã–π –∫–ª–∞—Å—Å –¥–µ–±—é—Ç–æ–≤,"
                                    " –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –ø–æ–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ 1. –µ2-–µ4 –µ7-–µ5\n"
                                    "–ö –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –≤—Å–µ –¥–µ–±—é—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ—Ä–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç"
                                    " –Ω–∞ 1.–µ2-–µ4 –≤—ã–±–∏—Ä–∞—é—Ç –¥—Ä—É–≥–æ–π —Ö–æ–¥, –∫—Ä–æ–º–µ 1‚Ä¶ –µ7-–µ5\n"
                                    "–ü–æ–ª—É–∑–∞–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã ‚Äî –¥–µ–±—é—Ç—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Ö–æ–¥–æ–º"
                                    " 1. d2-d4 —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±–µ–ª—ã—Ö –∏ –ª—é–±—ã–º —Ö–æ–¥–æ–º, –∫—Ä–æ–º–µ 1‚Ä¶d7-d5,"
                                    " —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —á—ë—Ä–Ω—ã—Ö. –ó–∞–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã ‚Äî –¥–µ–±—é—Ç—ã,"
                                    " –≥–¥–µ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –±–µ–ª—ã—Ö –Ω–µ 1. e2-e4.\n"
                                    "–ì–∞–º–±–∏—Ç ‚Äì —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å –¥–µ–±—é—Ç–∞, –∏–ª–∏ –¥–µ–±—é—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç,"
                                    " –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≥–æ—Ç–æ–≤ –Ω–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ"
                                    " –∂–µ—Ä—Ç–≤—ã —Ä–∞–¥–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.\n"
                                    "–í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"
                                    " —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞."
                                    " –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∏–¥–∞."
                                    " –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫.\n"
                                    "\u2757–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                                    " —Ç–∞–∫ –∂–µ, –∫–∞–∫ –æ–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=markup)
    return 6


async def debuts(update, context):
    req = update.message.text
    req = req[0].upper() + req[1:]
    if req in ['–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã', '–ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã', '–ó–∞–∫—Ä—ã—Ç—ã–µ –∏ –ø–æ–ª—É–∑–∞–∫—Ä—ã—Ç—ã–µ –¥–µ–±—é—Ç—ã',
               '–®–∞—Ö–º–∞—Ç–Ω—ã–µ –≥–∞–º–±–∏—Ç—ã']:
        arr = context.user_data['debuts'][req].keys()
        list_debuts = f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "{req}" –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ –¥–µ–±—é—Ç—ã:' + " \n \u2714" \
                      + "\n \u2714".join(arr)
        await update.message.reply_text(list_debuts)
        context.user_data['now_chapter'] = req
    else:
        response = context.user_data['debuts'][context.user_data['now_chapter']].get(req, None)
        if response is not None:
            await context.bot.send_photo(update.message.chat_id, response['photo'],
                                         caption=response['text'])
        else:
            await update.message.reply_text(f'–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–µ–±—é—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ'
                                            f" '{context.user_data['now_chapter']}'"
                                            f" –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")


def main():
    TOKEN = '5898517881:AAHwSba7YG8Lh_RgX7Z82yQvuDYkocnWKJM'
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            0: [MessageHandler(filters.TEXT & ~filters.COMMAND, empty_function)],
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, information_about_chess_players)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, chess_training)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_terms)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, random_fact)],
            6: [MessageHandler(filters.TEXT & ~filters.COMMAND, debuts)],
            7: [MessageHandler(filters.TEXT & ~filters.COMMAND, puzzles)]
        },
        fallbacks=[CommandHandler("training", training),
                   CommandHandler("chess_players", chess_players),
                   CommandHandler("chess_dictionary", chess_dictionary),
                   CommandHandler("interesting_facts", interesting_facts),
                   CommandHandler("chess_debuts", chess_debuts),
                   CommandHandler("solving_puzzles", solving_puzzles)])
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', get_help))
    application.run_polling()


if __name__ == '__main__':
    main()
